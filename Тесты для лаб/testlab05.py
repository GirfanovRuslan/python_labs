import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('src')

from lab05.json_csv import json_to_csv, csv_to_json
from lab05.csv_xlsx import csv_to_xlsx

def validate_file_exists(file_path: str) -> Path:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Path –æ–±—ä–µ–∫—Ç"""
    if not file_path or not isinstance(file_path, str):
        raise ValueError(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π: {file_path}")
    
    path = Path(file_path)
    
    if not path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not path.is_file():
        raise ValueError(f"{file_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º")
    
    return path

def validate_directory_exists(dir_path: str) -> Path:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    if not dir_path or not isinstance(dir_path, str):
        raise ValueError(f"–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π: {dir_path}")
    
    path = Path(dir_path)
    
    if not path.exists():
        raise FileNotFoundError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    if not path.is_dir():
        raise ValueError(f"{dir_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
    
    return path

def validate_file_extension(file_path: str, expected_extensions: list) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if not expected_extensions:
        raise ValueError("–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    path = validate_file_exists(file_path)
    
    ext = path.suffix.lower()
    expected_extensions = [ext.lower() if ext.startswith('.') else f'.{ext.lower()}' 
                          for ext in expected_extensions]
    
    if ext not in expected_extensions:
        expected_str = ", ".join(expected_extensions)
        raise ValueError(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {file_path} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ {expected_str}")

def ensure_directory(dir_path: str) -> Path:
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    if not dir_path or not isinstance(dir_path, str):
        raise ValueError(f"–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π: {dir_path}")
    
    path = Path(dir_path)
    path.mkdir(parents=True, exist_ok=True)
    return path

def cleanup_on_error(file_path: str) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏

def main():
    print("=== –¢–ï–°–¢ –õ–†5 ===")
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∑–∞—Ä–∞–Ω–µ–µ
    try:
        ensure_directory("data/lab05/out/")
        print("   üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: data/lab05/out/")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        return
    
    try:
        # –¢–µ—Å—Ç 1: JSON ‚Üí CSV
        print("1. JSON ‚Üí CSV...")
        try:
            json_to_csv("data/lab05/samples/people.json", "data/lab05/out/people_from_json.csv")
            print("   ‚úì –£—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            cleanup_on_error("data/lab05/out/people_from_json.csv")
            raise e
        
        # –¢–µ—Å—Ç 2: CSV ‚Üí JSON  
        print("2. CSV ‚Üí JSON...")
        try:
            validate_file_extension("data/lab05/samples/people.csv", ['.csv'])
            validate_file_extension("data/lab05/out/people_from_csv.json", ['.json'])
            csv_to_json("data/lab05/samples/people.csv", "data/lab05/out/people_from_csv.json")
            print("   ‚úì –£—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            cleanup_on_error("data/lab05/out/people_from_csv.json")
            raise e
        
        # –¢–µ—Å—Ç 3: CSV ‚Üí XLSX
        print("3. CSV ‚Üí XLSX...")
        try:
            validate_file_extension("data/lab05/samples/people.csv", ['.csv'])
            validate_file_extension("data/lab05/out/people.xlsx", ['.xlsx'])
            csv_to_xlsx("data/lab05/samples/people.csv", "data/lab05/out/people.xlsx")
            print("   ‚úì –£—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            cleanup_on_error("data/lab05/out/people.xlsx")
            raise e
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üìÅ –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª—ã –≤: data/lab05/out/")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        out_dir = Path("data/lab05/out/")
        if out_dir.exists():
            files = list(out_dir.glob("*"))
            if files:
                print("\nüìÑ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                for file in files:
                    size = file.stat().st_size
                    print(f"   ‚Ä¢ {file.name} ({size} –±–∞–π—Ç)")
        
    except FileNotFoundError as e:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        print("   üîç –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ data/lab05/samples/")
    except PermissionError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
        print("   üîí –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("   üêõ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:", type(e).__name__)

if __name__ == "__main__":
    main()